{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "fd9474a1",
   "metadata": {},
   "source": [
    "# Assignment 1 - 63011357 Thirawat Boonsang"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c95e1c2c",
   "metadata": {},
   "source": [
    "1) Explain the statement ”in python2 print use to be a statement, but from python3 it is an expression”."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b54e4d24",
   "metadata": {},
   "outputs": [],
   "source": [
    "# In Python 2, print is a statement that can be left blank\n",
    "# after calling without a syntax error.\n",
    "# However, in Python3, it required parameters to transfer\n",
    "# to print() function which is expression."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b38e1df2",
   "metadata": {},
   "source": [
    "2) Why can’t we use the list as a key in the dictionary?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "eaeea074",
   "metadata": {},
   "outputs": [],
   "source": [
    "# The key to dictionary requires immutable types.\n",
    "# However \"List\" is the mutable type that\n",
    "# can change its size and elements dynamically."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a118f2ea",
   "metadata": {},
   "source": [
    "3) Explore these below codes and explain it in your own words."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "309962fe",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, 3, 4, 5, 6, 7, 8, 9] [23, 2, 3, 4, 5, 6, 7, 8, 9]\n"
     ]
    }
   ],
   "source": [
    "Lis = [1,2,3,4,5,6,7,8,9]\n",
    "# declare lis name 'lis' with integer values inside.\n",
    "\n",
    "Lis1 = Lis\n",
    "Lis1 = Lis[:]\n",
    "# copy lis to lis1\n",
    "\n",
    "Lis1[0] = 23\n",
    "# Assign Lis1 at index 0 equal to 23\n",
    "\n",
    "print(Lis, Lis1)\n",
    "# print Lis and lis1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2398bf54",
   "metadata": {},
   "source": [
    "4) Intersection, pop, union, discard for set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "67e11bb4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Intersection in set A: {8, 2, 4, 6}\n",
      "Intersection in set B: {8, 2, 4, 6}\n",
      "union: {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 16, 18, 20, 21, 22, 23}\n",
      "Before pop: {2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 21, 22, 23}\n",
      "After pop: {4, 6, 8, 10, 12, 14, 16, 18, 20, 21, 22, 23}\n",
      "setA after discard: {0, 1, 3}\n"
     ]
    }
   ],
   "source": [
    "setA = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}\n",
    "setB = {2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 21, 22, 23}\n",
    "\n",
    "# intersection\n",
    "inter_setA = setA.intersection(setB)\n",
    "print(\"Intersection in set A: \"+str(inter_setA))\n",
    "inter_setB = setB.intersection(setA)\n",
    "print(\"Intersection in set B: \"+str(inter_setB))\n",
    "\n",
    "setA = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}\n",
    "setB = {2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 21, 22, 23}\n",
    "\n",
    "# union\n",
    "union_set = setA.union(setB)\n",
    "print(\"union: \"+str(union_set))\n",
    "\n",
    "# pop\n",
    "setA = {0, 1, 2, 3}\n",
    "print(\"Before pop: \" + str(setB))\n",
    "setB.pop()\n",
    "print(\"After pop: \" + str(setB))\n",
    "\n",
    "# discard\n",
    "setA = {0, 1, 3, 5}\n",
    "setA.discard(5)\n",
    "setA.discard(15)\n",
    "print(\"setA after discard: \" + str(setA))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "463d5361",
   "metadata": {},
   "source": [
    "5) Tuple can also be used as the keys in the dictionary. why?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ab55c5fc",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Due to \"Tuple\" is like \"List\" but in immutable type.\n",
    "# It cannot be changed after assigned elements."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
